import React, { useState, useEffect } from 'react';

const defaultConfig = {
  chatWidth: 300,
  chatHeight: 400,
  borderRadius: 10,
  fontFamily: 'Arial, sans-serif',
  headerColor: '#4CAF50',
  headerTextColor: '#FFFFFF',
  headerText: 'Chat with us',
  userMsgColor: '#E1FFC7',
  botMsgColor: '#FFFFFF',
  inputBgColor: '#F0F0F0',
  buttonColor: '#4CAF50',
  buttonTextColor: '#FFFFFF',
  apiKey: '',
  model: 'gpt-3.5-turbo',
};

const ChatbotBuilder = () => {
  const [config, setConfig] = useState(defaultConfig);
  const [previewMessages, setPreviewMessages] = useState([
    { sender: 'bot', text: 'Hello! How can I assist you today?' }
  ]);
  const [userInput, setUserInput] = useState('');

  const updateConfig = (key, value) => {
    setConfig(prevConfig => ({ ...prevConfig, [key]: value }));
  };

  const sendMessage = async () => {
    if (!userInput.trim()) return;

    setPreviewMessages(prev => [...prev, { sender: 'user', text: userInput }]);
    setUserInput('');

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${config.apiKey}`
        },
        body: JSON.stringify({
          model: config.model,
          messages: [{ role: 'user', content: userInput }],
          max_tokens: 150
        })
      });

      if (!response.ok) {
        throw new Error('Failed to fetch response from OpenAI API');
      }

      const data = await response.json();
      const botResponse = data.choices[0].message.content.trim();
      setPreviewMessages(prev => [...prev, { sender: 'bot', text: botResponse }]);
    } catch (error) {
      console.error('Error:', error);
      setPreviewMessages(prev => [...prev, { sender: 'bot', text: 'Sorry, I encountered an error. Please try again later.' }]);
    }
  };

  const generateEmbedCode = () => {
    return `
<div id="chatbot-container"></div>
<script src="https://example.com/chatbot-embed.js"></script>
<script>
  new ChatbotEmbed("chatbot-container", ${JSON.stringify(config, null, 2)});
</script>`;
  };

  return (
    <div style={{ display: 'flex', fontFamily: 'Arial, sans-serif' }}>
      <div style={{ flex: 1, padding: '20px' }}>
        <h2>Customization Options</h2>
        <div>
          <label>
            Width:
            <input
              type="number"
              value={config.chatWidth}
              onChange={(e) => updateConfig('chatWidth', Number(e.target.value))}
            />
          </label>
        </div>
        <div>
          <label>
            Height:
            <input
              type="number"
              value={config.chatHeight}
              onChange={(e) => updateConfig('chatHeight', Number(e.target.value))}
            />
          </label>
        </div>
        <div>
          <label>
            Header Color:
            <input
              type="color"
              value={config.headerColor}
              onChange={(e) => updateConfig('headerColor', e.target.value)}
            />
          </label>
        </div>
        <div>
          <label>
            Header Text:
            <input
              type="text"
              value={config.headerText}
              onChange={(e) => updateConfig('headerText', e.target.value)}
            />
          </label>
        </div>
        <div>
          <label>
            API Key:
            <input
              type="password"
              value={config.apiKey}
              onChange={(e) => updateConfig('apiKey', e.target.value)}
            />
          </label>
        </div>
        <div>
          <label>
            Model:
            <select
              value={config.model}
              onChange={(e) => updateConfig('model', e.target.value)}
            >
              <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
              <option value="gpt-4">GPT-4</option>
            </select>
          </label>
        </div>
      </div>
      <div style={{ flex: 1, padding: '20px' }}>
        <h2>Preview</h2>
        <div
          style={{
            width: `${config.chatWidth}px`,
            height: `${config.chatHeight}px`,
            border: '1px solid #ccc',
            borderRadius: `${config.borderRadius}px`,
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          <div
            style={{
              backgroundColor: config.headerColor,
              color: config.headerTextColor,
              padding: '10px',
              fontWeight: 'bold',
            }}
          >
            {config.headerText}
          </div>
          <div
            style={{
              flex: 1,
              overflowY: 'auto',
              padding: '10px',
            }}
          >
            {previewMessages.map((msg, index) => (
              <div
                key={index}
                style={{
                  backgroundColor: msg.sender === 'user' ? config.userMsgColor : config.botMsgColor,
                  borderRadius: '10px',
                  padding: '8px',
                  marginBottom: '8px',
                  maxWidth: '80%',
                  alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',
                }}
              >
                {msg.text}
              </div>
            ))}
          </div>
          <div style={{ display: 'flex', padding: '10px', backgroundColor: config.inputBgColor }}>
            <input
              type="text"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              style={{ flex: 1, marginRight: '10px', padding: '5px' }}
              placeholder="Type your message..."
            />
            <button
              onClick={sendMessage}
              style={{
                backgroundColor: config.buttonColor,
                color: config.buttonTextColor,
                border: 'none',
                padding: '5px 10px',
                cursor: 'pointer',
              }}
            >
              Send
            </button>
          </div>
        </div>
      </div>
      <div style={{ flex: 1, padding: '20px' }}>
        <h2>Embed Code</h2>
        <textarea
          readOnly
          value={generateEmbedCode()}
          style={{ width: '100%', height: '200px' }}
        />
      </div>
    </div>
  );
};

export default ChatbotBuilder;
